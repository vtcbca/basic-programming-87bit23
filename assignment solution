solution :1
def factorial_recursive(n):
    if n == 0 or n == 1:
        return 1
    return n * factorial_recursive(n - 1)
n = 8 # Example input
print(factorial_recursive(n))  # Using recursion

solution :2
import math
def is_prime_optimized(n):
    if n <= 1:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True
n = 8 # Example input
print(is_prime_optimized(n))     # Using optimized for loop

solution :3
def fibonacci_while_loop_value(max_value):
    fib_sequence = []
    a, b = 0, 1
    while a < max_value:
        fib_sequence.append(a)
        a, b = b, a + b
    return fib_sequence
n = 10  # Number of terms
print(fibonacci_recursive_terms(n))         # Using recursion

solution :4
def reverse_string_for_loop(s):
    reversed_string = ""
    for char in s:
        reversed_string = char + reversed_string
    return reversed_string
s = "Hello, World!"  # Example string
print(reverse_string_for_loop(s))         # Using for loop

solution :5
def is_palindrome_for_loop(s):
    start, end = 0, len(s) - 1
    while start < end:
        if s[start] != s[end]:
            return False
        start += 1
        end -= 1
    return True
s = "mayka"  # Example string
print(is_palindrome_for_loop(s))      # Using for loop

solution :6
def print_pattern_while_loop(n):
    i = 1
    while i <= n:
        print("* " * i)
        i += 1
n = 4  # Number of rows
print_pattern_while_loop(n)        # Using while loop

solution :7
def print_triangle_while_loop(n):
    i = 1
    while i <= n:
        # Print spaces for alignment
        print(" " * (n - i), end="")
        j = 1
        while j < 2 * i:
            print(j, end=" ")
            j += 1
        print()
        i += 1
n = 3  # Number of rows
print_triangle_while_loop(n)          # Using while loop

solution :8
def print_alphabet_pattern_while_loop(n):
    i = 1
    while i <= n:
        # Print leading spaces
        print(" " * (n - i), end="")
        
        # Print the first part (increasing alphabet)
        j = 1
        while j <= i:
            print(chr(64 + j), end=" ")
            j += 1
        
        # Print the second part (decreasing alphabet)
        j -= 2
        while j >= 1:
            print(chr(64 + j), end=" ")
            j -= 1
        
        print()
        i += 1
n = 3  # Number of rows
print_alphabet_pattern_while_loop(n)           # Using while loop
